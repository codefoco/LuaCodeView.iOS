pool:
  name: Hosted macOS
  demands: msbuild

steps:

# Print the current version of Xcode
- task: CmdLine@2
  displayName: 'Show Xcode version'
  inputs:
    script: '/usr/bin/xcodebuild -version'

# Azure DevOps hosted pool is still using an old version of Xamarin.iOS, 

- task: CmdLine@2
  displayName: 'Provisioning Xamarin.iOS'
  inputs:
    script: 'cd ~;
            curl -O https://download.visualstudio.microsoft.com/download/pr/d11a42ff-dd11-4005-b5a8-799856a96aad/2893a2da0df8a2e2d45ea17e2be2ccce/xamarin.ios-13.4.0.2.pkg;
            sudo installer -pkg ~/xamarin.ios-13.4.0.2.pkg -target /'

# Print the current version of Xamarin.iOS
- task: CmdLine@2
  inputs:
    script: '/Library/Frameworks/Xamarin.iOS.framework/Versions/Current/bin/mtouch --version'


- task: NuGetCommand@2
  displayName: 'NuGet restore'

- script: 'brew update'
  displayName: 'Brew Update'

- script: 'brew install gitversion --ignore-dependencies'
  displayName: 'Install GitVersion'

- task: PowerShell@2
  displayName: 'PreBuild Script'
  inputs:
    targetType: filePath
    filePath: ./devops/PreBuild.ps1
    arguments: 'Codefoco.LuaCodeView.iOS LuaCodeView.iOS.nuspec'

- task: MSBuild@1
  displayName: 'Build solution LuaCodeView.iOS.sln'
  inputs:
    solution: LuaCodeView.iOS.sln
    configuration: Release

- script: 'nuget setapikey $(apikey)'
  displayName: 'Set NuGet API Key'

- task: PowerShell@2
  displayName: 'Package NuGet'
  inputs:
    targetType: filePath
    filePath: ./devops/Package.ps1
    arguments: 'Codefoco.LuaCodeView.iOS LuaCodeView.iOS.nuspec'

- script: 'mv *.nupkg Codefoco.LuaCodeView.iOS.nupkg'
  displayName: 'Rename NuGet package'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Codefoco.LuaCodeView.iOS.nupkg Artifact'
  inputs:
    PathtoPublish: Codefoco.LuaCodeView.iOS.nupkg
    ArtifactName: Codefoco.LuaCodeView.iOS.nupkg

- task: PowerShell@2
  displayName: 'Publish NuGet'
  inputs:
    targetType: filePath
    filePath: ./devops/Publish.ps1
    arguments: Codefoco.LuaCodeView.iOS

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'SucceededWithIssues')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    message: |
            ⚠️ <b>Warning!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'Failed')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    buildQueuedBy: false
    message: |
            ❌ <b>Fail!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'Succeeded')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    buildQueuedBy: false
    message: |
            ✅ <b>Success!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

# 